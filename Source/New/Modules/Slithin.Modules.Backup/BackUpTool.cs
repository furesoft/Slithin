using Avalonia.Controls;
using Avalonia.Media;
using Ionic.Zip;
using Slithin.Modules.BaseServices.Models;
using Slithin.Modules.I18N.Models;
using Slithin.Modules.Tools.Models;
using Slithin.Modules.UI.Models;

namespace Slithin.Modules.Backup;

internal class BackupTool : ITool
{
    private readonly ILocalisationService _localisationService;
    private readonly INotificationService _notificationService;
    private readonly IPathManager _pathManager;

    public BackupTool(IPathManager pathManager, ILocalisationService localisationService, INotificationService notificationService)
    {
        _pathManager = pathManager;
        _localisationService = localisationService;
        _notificationService = notificationService;
    }

    public IImage Image => this.LoadImage("backup.png");

    public ToolInfo Info => new("backup", "Backup", "Internal", "Backup all your files", true, true);

    public bool IsConfigurable => false;

    public Control? GetModal()
    {
        return null;
    }

    public async void Invoke(object data)
    {
        await Task.Run(() =>
        {
            var status = _notificationService.ShowStatus("Start Compressing");
            using var zip = new ZipFile();
            
            AddZipEntries(zip);

            zip.Comment = "This backup was generated by Slithin";

            zip.SaveProgress += (s, e) =>
            {
                if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                {
                    status.Step(_localisationService.GetStringFormat("Compressing '{0}'", e.CurrentEntry.FileName));
                }
            };

            zip.Save(Path.Combine(_pathManager.BackupsDir,
                $"Backup_from_{DateTime.Now:yyyy-dd-M--HH-mm-ss}.zip"));
            status.Step(_localisationService.GetString("Complete"));
        });
    }

    private void AddZipEntries(ZipFile zip)
    {
        zip.AddDirectory(_pathManager.NotebooksDir, "Notebooks");
        zip.AddDirectory(_pathManager.TemplatesDir, "Templates");
        zip.AddDirectory(_pathManager.CustomScreensDir, "Screens");

        zip.AddFile(Path.Combine(_pathManager.ConfigBaseDir, "templates.json"), "/");
        zip.AddFile(Path.Combine(_pathManager.ConfigBaseDir, "xochitl.conf"), "/");
    }
}
