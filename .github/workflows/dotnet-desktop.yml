name: .NET Core Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Source/Slithin.csproj                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    - name: Publish Windows x86
      run: dotnet publish -c Release -r win-x86 -p:PublishReadyToRun=true --output ./Dist/Win-x86 $env:Solution_Name

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows_x86
        path: ./Dist/Win-x86
        
    - name: Publish Windows x64
      run: dotnet publish -c Release -r win-x64 -p:PublishReadyToRun=true --output ./Dist/Win-x64 $env:Solution_Name

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows_x64
        path: ./Dist/Win-x64

    - name: Publish OSX x64
      run: dotnet publish -c Release -r osx-x64 --output ./Dist/OSX-x64 $env:Solution_Name

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: OSX_x64
        path: ./Dist/OSX-x64
        
    - name: Publish Linux x64
      run: dotnet publish -c Release -r linux-x64 --output ./Dist/Linux-x64 $env:Solution_Name

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux_X64
        path: ./Dist/Linux-x64
