name: .NET Core Desktop

on:
  push:
    branches: [ main ]
  pull_request:

env:
  SOLUTION_PATH: Source/Slithin
  SOLUTION_NAME: Source/Slithin/Slithin.csproj                         # Replace with your solution name, i.e. MyWpfApp.sln.
  TEST_PROJECT_PATH: Source/Slithin.Tests/Slithin.Tests.csproj               # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
  WAP_PROJECT_DIRECTORY: Deployment/Windows-Store    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
  WAP_PROJECT_PATH: Windows-Store.wapproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  SDK: Source/Slithin.Scripting.Interactive/Slithin.Scripting.Interactive.csproj   
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  Setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/cache@v3
      name: Setup Cache
      id: cache-setup
      with:
          path: |
            ~/.nuget/packages
            ~/.dotnet
          key: ${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-
    - name: Install .NET Core
      continue-on-error: true
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Installing dotnet-packaging deb
      continue-on-error: true
      run: dotnet tool install --global dotnet-deb
    - name: Installing dotnet-packaging rpm
      continue-on-error: true
      run: dotnet tool install --global dotnet-rpm
  Build:
    runs-on: ubuntu-latest
    needs:
      - setup
    strategy:
        matrix:
          arch: ["win-x86", "win-x64", "linux-x64", "osx-x64", "osx.12-arm64"]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/cache@v3
      name: Setup Cache
      id: cache-setup
      with:
          path: |
            ~/.nuget/packages
            ~/.dotnet
          key: ${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-
    - name: Build ${{ matrix.arch }}
      run: dotnet publish -c Release -r ${{ matrix.arch }} -p:PublishReadyToRun=true --output ./Dist/${{ matrix.arch }} $SOLUTION_NAME
    - name: Ziping
      uses: montudor/action-zip@v1
      with:
        args: zip -qq -r ./Dist/${{ matrix.arch }}.zip ./Dist/${{ matrix.arch }}
    - name: Upload the build output
      uses: actions/upload-artifact@v3
      with:
        name: publish-output
        path: "./Dist/**/*.*"
        retention-days: 1

  "Build packages":
    runs-on: ubuntu-latest
    needs:
      - setup
    strategy:
        matrix:
          package: ["rpm", "deb"]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/cache@v3
      name: Setup Cache
      id: cache-setup
      with:
          path: |
            ~/.nuget/packages
            ~/.dotnet
          key: ${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-
    - name: Build ${{ matrix.package }}
      run: dotnet ${{ matrix.package }} --version-suffix "" -r linux-x64 -c Release -o ./Dist/Linux-x64-${{ matrix.package }} $SOLUTION_NAME
    - name: Upload the build output
      uses: actions/upload-artifact@v3
      with:
        name: build-packages-output
        path: "${{ env.SOLUTION_PATH }}/Dist/**/*.*"
        retention-days: 1

  "Create Prerelease":
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - publish
      - build-packages
    environment: prerelease
    concurrency: prerelease
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get version Tag
      id: versiontag
      run: |
        echo -e ::set-output name=tag::$(grep '<Version>' < $SOLUTION_NAME | sed 's/<[vV]ersion>\(.*\)<\/[vV]ersion>/\1/')
    - uses: actions/download-artifact@v1
      name: Download package build artifacts
      with:
        name: build-packages-output
        path: ./dist
    - uses: actions/download-artifact@v1
      name: Download build artifacts
      with:
        name: publish-output
        path: ./dist
    - uses: softprops/action-gh-release@v1
      name: Generate Prerelease
      with:
        body_path: "${{ env.SOLUTION_PATH }}/Changelog.txt"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ steps.versiontag.outputs.tag }}
        prerelease: true
        files: |
          ./dist/**/*.zip
          ./dist/**/*.deb
          ./dist/**/*.rpm

  "Create Release":
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - prerelease
    environment: release
    concurrency: release
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get version Tag
      id: versiontag
      run: |
        echo -e ::set-output name=tag::$(grep '<Version>' < $SOLUTION_NAME | sed 's/<[vV]ersion>\(.*\)<\/[vV]ersion>/\1/')
    - uses: actions/download-artifact@v1
      name: Download package build artifacts
      with:
        name: build-packages-output
        path: ./dist
    - uses: actions/download-artifact@v1
      name: Download build artifacts
      with:
        name: publish-output
        path: ./dist
    - uses: softprops/action-gh-release@v1
      name: Generate Release
      with:
        body_path: "${{ env.SOLUTION_PATH }}/Changelog.txt"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ steps.versiontag.outputs.tag }}
        prerelease: false
        files: |
          ./dist/**/*.zip
          ./dist/**/*.deb
          ./dist/**/*.rpm
